--DML
-- creating database
CREATE DATABASE Examination_System_Data
ON PRIMARY
(
    NAME = 'ExaminationSystem_Primary',
    FILENAME = 'C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\ExaminationSystem_Primary.mdf',
    SIZE = 500MB,
    MAXSIZE = UNLIMITED,
    FILEGROWTH = 10%
),
FILEGROUP EXAM_DATA_FG
(
    NAME = 'ExaminationSystem_ExamData',
    FILENAME = 'C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\ExaminationSystem_ExamData.ndf',
    SIZE = 500MB,
    MAXSIZE = UNLIMITED,
    FILEGROWTH = 50MB
)
LOG ON
(
    NAME = 'ExaminationSystem_Log',
    FILENAME = 'C:\Program Files\Microsoft SQL Server\MSSQL16.MSSQLSERVER\MSSQL\DATA\ExaminationSystem_Log.ldf',
    SIZE = 500MB,
    MAXSIZE = UNLIMITED,
    FILEGROWTH = 10%
);
GO

USE Examination_System_Data;
GO

--------------------- creating tables ---------------------

-- Branch Table
CREATE TABLE Branch (
    Bran_ID INT IDENTITY(1,1) PRIMARY KEY,
    Bran_Name NVARCHAR(50) NOT NULL
);

-- Department Table
CREATE TABLE Department (
    Dep_ID INT IDENTITY(1,1) PRIMARY KEY,
    Dep_Name NVARCHAR(100) NOT NULL
);

-- Dept_Branch
CREATE TABLE Dept_Branch (
    Dep_ID INT NOT NULL FOREIGN KEY REFERENCES Department(Dep_ID),
    Bran_ID INT NOT NULL FOREIGN KEY REFERENCES Branch(Bran_ID),
    PRIMARY KEY (Dep_ID, Bran_ID) -- Composite Primary Key
);

-- Track Table
CREATE TABLE Track (
    Track_ID INT IDENTITY(1,1) PRIMARY KEY,
    Track_Name NVARCHAR(100) NOT NULL,
    Dep_ID INT FOREIGN KEY REFERENCES Department(Dep_ID)
);

-- Intake Table
CREATE TABLE Intake (
    ID INT IDENTITY(1,1) PRIMARY KEY,
    Year INT NOT NULL
);

-- Student Table 
CREATE TABLE Student (
    ST_ID INT IDENTITY(1,1) PRIMARY KEY,
    ST_Name NVARCHAR(100) NOT NULL,
    User_Name NVARCHAR(50) NOT NULL UNIQUE,
    Email NVARCHAR(100),
    Intake_ID INT FOREIGN KEY REFERENCES Intake(ID),
    Track_ID INT FOREIGN KEY REFERENCES Track(Track_ID),
    Bran_ID INT FOREIGN KEY REFERENCES Branch(Bran_ID)
);

-- Course Table
CREATE TABLE Course (
    Crs_ID INT IDENTITY(1,1) PRIMARY KEY,
    Crs_Name NVARCHAR(100) NOT NULL,
    Description NVARCHAR(MAX),
    Min_Deg INT NOT NULL,
    Max_Deg INT NOT NULL,
    CONSTRAINT Course_Degrees CHECK (Max_Deg > Min_Deg)
);

-- Instructor Table User_Name 
CREATE TABLE Instructor (
    Ins_ID INT IDENTITY(1,1) PRIMARY KEY,
    Ins_Name NVARCHAR(100) NOT NULL,
    User_Name NVARCHAR(50) NOT NULL UNIQUE,
    Email NVARCHAR(150) NOT NULL,
    Dep_ID INT FOREIGN KEY REFERENCES Department(Dep_ID)
);

-- Exam Table 
CREATE TABLE Exam (
    Ex_ID INT IDENTITY(1,1) PRIMARY KEY,
    [Date] DATE NOT NULL,
    Start_time DATETIME NOT NULL,
    End_time DATETIME NOT NULL,
    Corrective BIT NOT NULL,
    Bran_ID INT FOREIGN KEY REFERENCES Branch(Bran_ID),
    Crs_ID INT FOREIGN KEY REFERENCES Course(Crs_ID),
    Intake_ID INT NOT NULL FOREIGN KEY REFERENCES Intake(ID),
    Ins_ID INT NOT NULL FOREIGN KEY REFERENCES Instructor(Ins_ID),
    Track_ID INT NOT NULL FOREIGN KEY REFERENCES Track(Track_ID),
    Exam_Status NVARCHAR(20) DEFAULT 'Scheduled' 
        CONSTRAINT CHK_Exam_Status CHECK (Exam_Status IN ('Scheduled', 'In Progress', 'Completed', 'Cancelled')),
    CONSTRAINT Check_Exam_Time CHECK (End_time > Start_time),
    CONSTRAINT CHK_Exam_Duration CHECK (DATEDIFF(MINUTE, Start_time, End_time) BETWEEN 30 AND 240)
) ON EXAM_DATA_FG;

-- Question Pool Table
CREATE TABLE Qu_Pool (
    Qu_ID INT IDENTITY(1,1) PRIMARY KEY,
    Body NVARCHAR(MAX),
    Type NVARCHAR(50),
    Degree INT DEFAULT 5, -- 5 any question has 5 degrees
    Crs_ID INT FOREIGN KEY REFERENCES Course(Crs_ID),
    CONSTRAINT Check_Question_Type CHECK (Type IN ('MCQ', 'True/False'))
) ON EXAM_DATA_FG;

-- Choices Table
CREATE TABLE Choices (
    Ch_ID INT IDENTITY(1,1) PRIMARY KEY,
    Body NVARCHAR(MAX) NOT NULL,
    Is_Correct BIT NOT NULL,
    Qu_ID INT FOREIGN KEY REFERENCES Qu_Pool(Qu_ID)
);

-- Exam_Questions Table
CREATE TABLE Exam_Questions (
    Exam_ID INT FOREIGN KEY REFERENCES Exam(Ex_ID),
    Question_ID INT FOREIGN KEY REFERENCES Qu_Pool(Qu_ID),
    Question_Order INT NOT NULL,
    PRIMARY KEY (Exam_ID, Question_ID)
) ON EXAM_DATA_FG;

-- Student Exam Answers Table
CREATE TABLE Stu_Exam_QUP (
    ST_ID INT FOREIGN KEY REFERENCES Student(ST_ID),
    Ex_ID INT FOREIGN KEY REFERENCES Exam(Ex_ID),
    Qu_ID INT FOREIGN KEY REFERENCES Qu_Pool(Qu_ID),
    Answer_Ch_ID INT NULL FOREIGN KEY REFERENCES Choices(Ch_ID),
    Answer_TF BIT NULL,
    Score INT NULL,
    PRIMARY KEY (ST_ID, Ex_ID, Qu_ID),
    CONSTRAINT CHK_Answer_Type CHECK (
        (Answer_Ch_ID IS NOT NULL AND Answer_TF IS NULL) OR 
        (Answer_Ch_ID IS NULL AND Answer_TF IS NOT NULL)
    )
) ON EXAM_DATA_FG;

-- Exam_Corrective Table
CREATE TABLE Exam_Corrective (
    Corrective_ID INT IDENTITY(1,1) PRIMARY KEY,
    Original_Exam_ID INT FOREIGN KEY REFERENCES Exam(Ex_ID),
    Student_ID INT FOREIGN KEY REFERENCES Student(ST_ID),
    Corrective_Date DATE NOT NULL,
    Start_time DATETIME NOT NULL,
    End_time DATETIME NOT NULL,
    Is_Completed BIT DEFAULT 0,
    Score INT NULL,
    CONSTRAINT Check_Corrective_Time CHECK (End_time > Start_time),
    CONSTRAINT CHK_Corrective_Duration CHECK (DATEDIFF(MINUTE, Start_time, End_time) BETWEEN 30 AND 240)
) ON EXAM_DATA_FG;

-- Mapping Tables
CREATE TABLE Crs_Inst_Intake (
    Crs_ID INT FOREIGN KEY REFERENCES Course(Crs_ID),
    Ins_ID INT FOREIGN KEY REFERENCES Instructor(Ins_ID),
    Intake_ID INT FOREIGN KEY REFERENCES Intake(ID),
    PRIMARY KEY (Crs_ID, Ins_ID, Intake_ID)
);

CREATE TABLE Track_Crs (
    Track_ID INT FOREIGN KEY REFERENCES Track(Track_ID),
    Crs_ID INT FOREIGN KEY REFERENCES Course(Crs_ID),
    PRIMARY KEY (Track_ID, Crs_ID)
);

CREATE TABLE Inst_Exam_QuP (
    Ins_ID INT FOREIGN KEY REFERENCES Instructor(Ins_ID),
    Ex_ID INT FOREIGN KEY REFERENCES Exam(Ex_ID),
    Qu_ID INT FOREIGN KEY REFERENCES Qu_Pool(Qu_ID),
    PRIMARY KEY (Ins_ID, Ex_ID, Qu_ID)
);

CREATE TABLE Intake_Ins_Branch (
    Intake_ID INT FOREIGN KEY REFERENCES Intake(ID),
    Ins_ID INT FOREIGN KEY REFERENCES Instructor(Ins_ID),
    Bran_ID INT FOREIGN KEY REFERENCES Branch(Bran_ID),
    PRIMARY KEY (Intake_ID, Ins_ID, Bran_ID)
);

-------------------------------------------------------------------------------------
